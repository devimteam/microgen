package template

import (
	"go/parser"
	"go/token"
	"testing"

	"bytes"

	"github.com/devimteam/microgen/generator"
	parser2 "github.com/devimteam/microgen/parser"
)

func TestExchangeForCountSvc(t *testing.T) {
	src := `package stringsvc

	import (
		"context"
	)

	type StringService interface {
		Count(ctx context.Context, text string, symbol string) (count int)
	}`

	out := `/*
This file was automatically generated by "microgen" utility.
Please, do not edit.
*/
package stringsvc

type CountRequest struct {
	Text   string ` + "`json:\"text\"`" + `
	Symbol string ` + "`json:\"symbol\"`" + `
}

type CountResponse struct {
	Count int ` + "`json:\"count\"`" + `
}
` // Blank line!
	// `+"` is a trick from https://stackoverflow.com/questions/21198980/golang-how-to-escape-back-ticks
	f, err := parser.ParseFile(token.NewFileSet(), "", src, 0)
	if err != nil {
		t.Errorf("unable to parse file: %v", err)
	}
	fs, err := parser2.ParseInterface(f, "StringService")
	if err != nil {
		t.Errorf("could not get interface func signatures: %v", err)
	}
	buf := bytes.NewBuffer([]byte{})
	gen := generator.NewWriterGenerator([]generator.Template{
		&ExchangeTemplate{},
	}, fs, buf)
	err = gen.Generate()
	if err != nil {
		t.Errorf("unable to generate: %v", err)
	}
	if buf.String() != out {
		t.Errorf("Got:\n\n%v\n\nShould be:\n\n%v", buf.String(), out)
	}
}
